syntax = "proto3";

option go_package = "github.com/LogitsAI/kube-controller-api/controllerpb";

import "kube_controller_api/controller.proto";
import "kube_controller_api/reconciler.proto";

package kube_controller_api;

service ControllerManager {
    // Start configures the Controller Manager and starts it.
    //
    // If the Controller Manager has already been started, for example if there
    // are multiple worker clients or a worker restarted, this will succeed
    // idempotently as long as the configuration is the same. If the config is
    // different, it will return an error.
    rpc Start(StartRequest) returns (StartResponse) {}

    // ReconcileLoop returns the next object to be processed by the controller.
    rpc ReconcileLoop(stream ReconcileLoopRequest) returns (stream ReconcileLoopResponse) {}
}

message StartRequest {
    repeated ControllerConfig controllers = 1;
}

message StartResponse {
}

// ReconcileLoop() is a bidirectional streaming call.
// Each request can contain one of several types of sub-messages.
message ReconcileLoopRequest {
    oneof msg {
        // Subscribe should be sent once at the beginning of the stream,
        // to indicate what controller the client is interested in.
        WorkQueue subscribe = 1;

        // Acknowledge should be sent after each object is processed,
        // whether it was successful or not. The server will not send
        // another object until the last outstanding response has been
        // acknowledged.
        ReconcileResult acknowledge = 2;
    }
}

// ReconcileLoopResponse contains a single object to be reconciled.
message ReconcileLoopResponse {
    // Parent is a JSON-encoded Kubernetes object to be reconciled.
    bytes parent = 1;

    // Children is a list of lists of JSON-encoded Kubernetes objects
    // representing the children of the parent object, grouped by object kind.
    repeated ChildObjects children = 2;
}
