# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from kube_controller_api import manager_pb2 as kube__controller__api_dot_manager__pb2


class ControllerManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateManager = channel.unary_unary(
                '/kube_controller_api.ControllerManager/CreateManager',
                request_serializer=kube__controller__api_dot_manager__pb2.CreateManagerRequest.SerializeToString,
                response_deserializer=kube__controller__api_dot_manager__pb2.CreateManagerResponse.FromString,
                )
        self.ReconcileLoop = channel.stream_stream(
                '/kube_controller_api.ControllerManager/ReconcileLoop',
                request_serializer=kube__controller__api_dot_manager__pb2.ReconcileLoopRequest.SerializeToString,
                response_deserializer=kube__controller__api_dot_manager__pb2.ReconcileLoopResponse.FromString,
                )


class ControllerManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateManager(self, request, context):
        """CreateManager creates a Controller Manager with the given config.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReconcileLoop(self, request_iterator, context):
        """ReconcileLoop returns the next object to be processed by the controller.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ControllerManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateManager': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateManager,
                    request_deserializer=kube__controller__api_dot_manager__pb2.CreateManagerRequest.FromString,
                    response_serializer=kube__controller__api_dot_manager__pb2.CreateManagerResponse.SerializeToString,
            ),
            'ReconcileLoop': grpc.stream_stream_rpc_method_handler(
                    servicer.ReconcileLoop,
                    request_deserializer=kube__controller__api_dot_manager__pb2.ReconcileLoopRequest.FromString,
                    response_serializer=kube__controller__api_dot_manager__pb2.ReconcileLoopResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kube_controller_api.ControllerManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ControllerManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kube_controller_api.ControllerManager/CreateManager',
            kube__controller__api_dot_manager__pb2.CreateManagerRequest.SerializeToString,
            kube__controller__api_dot_manager__pb2.CreateManagerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReconcileLoop(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/kube_controller_api.ControllerManager/ReconcileLoop',
            kube__controller__api_dot_manager__pb2.ReconcileLoopRequest.SerializeToString,
            kube__controller__api_dot_manager__pb2.ReconcileLoopResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
